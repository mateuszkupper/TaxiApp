/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package application;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 *
 * @author 114310771
 */
public class FormDriverHomepage extends javax.swing.JFrame  {
    private Driver driver;
    private Order order;
    private Notification notification;
    private Notification notificationCancel;
    /**
     * Creates new form ConfirmLift
     */
    public FormDriverHomepage() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);        
        timer.setRepeats(true);
        timer.setCoalesce(true);
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDistance = new javax.swing.JLabel();
        lblTime = new javax.swing.JLabel();
        txtDistance = new javax.swing.JTextField();
        txtTime = new javax.swing.JTextField();
        btnConfirmLift = new javax.swing.JButton();
        lblPickUpPoint = new javax.swing.JLabel();
        lblDestination = new javax.swing.JLabel();
        txtPickUpPoint = new javax.swing.JTextField();
        txtDestination = new javax.swing.JTextField();
        lblCost = new javax.swing.JLabel();
        txtCost = new javax.swing.JTextField();
        btnArrived = new javax.swing.JButton();
        btnRecordTrip = new javax.swing.JButton();
        btnCancelTrip = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblDistance.setText("Distance");

        lblTime.setText("Time");

        btnConfirmLift.setText("Finish Lift");
        btnConfirmLift.setEnabled(false);

        lblPickUpPoint.setText("Pick Up Point");

        lblDestination.setText("Destination");

        lblCost.setText("Cost");

        btnArrived.setText("Arrived At Pick Up Point");
        btnArrived.setEnabled(false);

        btnRecordTrip.setText("Record Trip");

        btnCancelTrip.setText("Cancel Trip");
        btnCancelTrip.setEnabled(false);
        btnCancelTrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelTripActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancelTrip, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRecordTrip, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnArrived, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConfirmLift, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(113, 113, 113))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblDestination)
                            .addComponent(lblDistance)
                            .addComponent(lblPickUpPoint))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDestination, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                                    .addComponent(txtPickUpPoint))
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGap(228, 228, 228)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtDistance, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblCost)
                            .addComponent(lblTime))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPickUpPoint)
                    .addComponent(txtPickUpPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDestination)
                    .addComponent(txtDestination, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDistance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDistance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTime))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCost)
                    .addComponent(txtCost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnCancelTrip)
                .addGap(9, 9, 9)
                .addComponent(btnRecordTrip)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnArrived)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnConfirmLift)
                .addGap(8, 8, 8))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelTripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelTripActionPerformed
        driver.cancelOrder(notificationCancel.getOrderID());
        txtPickUpPoint.setEnabled(true);
        txtDestination.setEnabled(true);
        txtDistance.setEnabled(true);
        txtTime.setEnabled(true);
        txtCost.setEnabled(true);
        btnCancelTrip.setEnabled(true);
        btnArrived.setEnabled(true);
        btnRecordTrip.setEnabled(true);


        txtPickUpPoint.setText("");
        txtDestination.setText("");
        txtDistance.setText("");
        txtTime.setText("");
        txtCost.setText("");        
    }//GEN-LAST:event_btnCancelTripActionPerformed
  
    Timer timer = new Timer(2000, new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            IOdb database = new IOdb();
            try {
                notification = database.checkForNotification("DRIVER", driver.getID());
                if(notification.getNotificationID()!=0) {
                    if("TRIP_REQUEST".equals(notification.getMessage())) {
                        order = database.getOrder(notification.getOrderID());
                        notificationCancel=notification;
                        int reply = JOptionPane.showConfirmDialog(null, "New trip request: from: " + order.getPickupPointLocation() + ", to: " + order.getDestination() + ". Accept?", "Trip request", JOptionPane.YES_NO_OPTION);
                        if(reply==JOptionPane.YES_OPTION) {
                            driver.handleNotification(notification, reply);
                            txtPickUpPoint.setEnabled(false);
                            txtDestination.setEnabled(false);
                            txtDistance.setEnabled(false);
                            txtTime.setEnabled(false);
                            txtCost.setEnabled(false);
                            btnCancelTrip.setEnabled(true);
                            btnArrived.setEnabled(true);
                            btnRecordTrip.setEnabled(false);
                            

                            txtPickUpPoint.setText(order.getPickupPointLocation());
                            txtDestination.setText(order.getDestination());
                            txtDistance.setText(String.valueOf(order.getDistance()) + " km");
                            txtTime.setText(String.valueOf(order.getTravelTime()) + " minutes");
                            txtCost.setText("€" + String.valueOf(order.getDistance()*2));
                        }
                    } else if("CANCELLED".equals(notification.getMessage())) {
                        JOptionPane.showMessageDialog(null, "The order has been cancelled!", "Order Cancelled", JOptionPane.INFORMATION_MESSAGE);
                        driver.handleNotification(notification, 0);
                        txtPickUpPoint.setEnabled(true);
                        txtDestination.setEnabled(true);
                        txtDistance.setEnabled(true);
                        txtTime.setEnabled(true);
                        txtCost.setEnabled(true);
                        btnCancelTrip.setEnabled(false);
                        btnArrived.setEnabled(false);
                        btnRecordTrip.setEnabled(true);


                        txtPickUpPoint.setText("");
                        txtDestination.setText("");
                        txtDistance.setText("");
                        txtTime.setText("");
                        txtCost.setText("");
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Error getting a notification!", "InfoBox: " + "Login", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    });
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormDriverHomepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormDriverHomepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormDriverHomepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormDriverHomepage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormDriverHomepage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnArrived;
    private javax.swing.JButton btnCancelTrip;
    private javax.swing.JButton btnConfirmLift;
    private javax.swing.JButton btnRecordTrip;
    private javax.swing.JLabel lblCost;
    private javax.swing.JLabel lblDestination;
    private javax.swing.JLabel lblDistance;
    private javax.swing.JLabel lblPickUpPoint;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextField txtCost;
    private javax.swing.JTextField txtDestination;
    private javax.swing.JTextField txtDistance;
    private javax.swing.JTextField txtPickUpPoint;
    private javax.swing.JTextField txtTime;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the driver
     */
    public Driver getDriver() {
        return driver;
    }

    /**
     * @param driver the driver to set
     */
    public void setDriver(Driver driver) {
        this.driver = driver;
    }
}
